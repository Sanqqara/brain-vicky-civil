{"version":3,"sources":["logo.svg","components/home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","onRainSubmit","rainfallData","state","data","year","rainfall","push","setState","rainfallBlank","yearBlank","rainfallValues","Number","onYearSubmit","e","target","value","onMeasureSubmit","calcuateQ","rainValues","sort","console","log","calculateSlope","slope","h1","h2","distance","sectionSelect","section","zInputHidden","calculateMain","numberOfLoops","breadth","depth","area","radius","arPower","Math","pow","q","qValue","n","manningValue","difference","optimumDepth","sortedRainfall","manningOptions","zValue","AValue","manning_values","options","i","length","Object","values","label","keys","this","className","type","onChange","onClick","bind","style","color","hidden","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.753c0ce4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react'\nimport Select from 'react-select'\n\nexport class Home extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            year: 0,\n            yearBlank: 0,\n            rainfall: [],\n            rainfallBlank: 0,\n            rainfallData: [],\n            rainfallValues: [],\n            sortedRainfall: [],\n            manningOptions: [],\n            manningValue: 0,\n            distance: 0,\n            h1: 0,\n            h2: 0,\n            slope: 0,\n            zValue: 0,\n            zInputHidden: true,\n            section: \"\",\n            AValue: 0,\n            breadth: 0,\n            depth: 0,\n            qValue: 1,\n            difference: 0,\n            optimumDepth: 0\n        }\n    }\n\n    componentDidMount() {\n        const manning_values = [\n            { \"Asbestos cement\": 0.011 },\n            { \"Asphalt\": 0.016 },\n            { \"Brass\": 0.011 },\n            { \"Brick and cement mortar sewers\": 0.015 },\n            { \"Canvas\": 0.012 },\n            { \"Cast or Ductile iron, new\": 0.012 },\n            { \"Clay tile\": 0.014 },\n            { \"Concrete - steel forms\": 0.011 },\n            { \"Concrete (Cement) - finished\": 0.012 },\n            { \"Concrete - wooden forms\": 0.015 },\n            { \"Concrete - centrifugally spun\": 0.013 },\n            { \"Copper\": 0.011 },\n            { \"Corrugated metal\": 0.022 },\n            { \"Earth, smooth\": 0.018 },\n            { \"Earth channel - clean\": 0.022 },\n            { \"Earth channel - gravelly\": 0.025 },\n            { \"Earth channel - weedy\": 0.030 },\n            { \"Earth channel - stony, cobbles\": 0.035 },\n            { \"Earth channel - pasture, farmland\": 0.035 },\n            { \"Floodplains - light brush\": 0.050 },\n            { \"Floodplains - heavy brush\": 0.075 },\n            { \"Floodplains - trees\": 0.15 },\n            { \"Galvanised iron\": 0.016 },\n            { \"Glass\": 0.010 },\n            { \"Gravel, firm\": 0.023 },\n            { \"Lead\": 0.011 },\n            { \"Masonry\": 0.025 },\n            { \"Metal - corrugated\": 0.022 },\n            { \"Natural streams - clean and straight\": 0.030 },\n            { \"Natural streams - major rivers\": 0.035 },\n            { \"Natural streams - sluggish with deep pools\": 0.040 },\n            { \"Natural channels, very poor condition\": 0.060 },\n            { \"Plastic\": 0.009 },\n            { \"Polythylene PE - Corrugated with smooth inner walls\": 0.012 }, // estimate\n            { \"Polythylene PE - Corrugated with corrugated inner walls\": 0.021 }, // estimate\n            { \"Polyvinyl Chloride PVC - with smooth inner walls\": 0.010 }, // estimate\n            { \"Rubble Masonry\": 0.020 }, // estimate\n            { \"Steel - Coal-tar enamel\": 0.010 },\n            { \"Steel - smooth\": 0.012 },\n            { \"Steel - New unlined\": 0.011 },\n            { \"Steel - Riveted\": 0.019 },\n            { \"Vitrified clay sewer pipe\": 0.014 }, // estimate\n            { \"Wood - planned\": 0.012 },\n            { \"Wood - unplaned\": 0.013 },\n            { \"Wood stave pipe, small diameter\": 0.012 }, // estimate\n            { \"Wood stave pipe, large diameter\": 0.013 } // estimate\n        ]\n\n        const options = []\n        for (let i = 0; i < manning_values.length; i++) {\n            // console.log([{ value: Object.values(manning_values[i]), label: Object.keys(manning_values[i]) }])\n            options.push({ value: Object.values(manning_values[i]), label: Object.keys(manning_values[i]) })\n            // return([{ value: Object.values(manning_values[i]), label: Object.keys(manning_values[i]) }])\n        }\n        this.setState({ manningOptions: options })\n        // console.log(options)\n    }\n\n\n    onRainSubmit = () => {\n        let rainfallData = [...this.state.rainfallData]\n        let data = { [this.state.year]: this.state.rainfall }\n        rainfallData.push(data)\n        this.setState({ rainfallData: rainfallData })\n        this.setState({ rainfallBlank: \"\" })\n        this.setState({ yearBlank: \"\" })\n        let rainfallValues = [...this.state.rainfallValues]\n        rainfallValues.push(Number(this.state.rainfall))\n        this.setState({ rainfallValues: rainfallValues })\n    }\n\n    onYearSubmit = (e) => {\n        this.setState({ yearBlank: e.target.value })\n        this.setState({ year: e.target.value })\n    }\n\n    onMeasureSubmit = (e) => {\n        this.setState({ rainfallBlank: e.target.value })\n        this.setState({ rainfall: e.target.value })\n        // let rainfallValues = [...this.state.rainfallValues]\n        // rainfallValues.push(e.target.value)\n        // this.setState({rainfallValues: rainfallValues})\n    }\n\n    calcuateQ = () => {\n        let rainValues = [...this.state.rainfallValues]\n        rainValues = rainValues.sort()\n        console.log(rainValues)\n    }\n\n    calculateSlope = () => {\n        let slope = (Number(this.state.h1) - Number(this.state.h2)) / Number(this.state.distance)\n        this.setState({ slope: (Number(slope) / 100) })\n    }\n\n    sectionSelect = (e) => {\n        this.setState({ section: e.value })\n        if (e.value === \"Trapezoidal\") {\n            this.setState({ zInputHidden: false })\n        } else {\n            this.setState({ zInputHidden: true })\n        }\n    }\n\n    calculateMain = () => {\n        if (this.state.section === \"Rectangular\") {\n            let numberOfLoops = 100000\n            let breadth = this.state.breadth\n            let depth = this.state.depth\n            let differenceArray = []\n\n            while (numberOfLoops > 0) {\n                // let depthArray = []\n                // let qnsArray = []\n\n                let area = breadth * depth\n                let perimeter = breadth + (2 * depth)\n                let radius = area / perimeter\n                let rPower = Math.pow(radius, (2 / 3))\n                let arPower = area * rPower\n                // console.log(arPower)\n\n                let q = this.state.qValue\n                let n = this.state.manningValue\n                let slope = this.state.slope\n                let qns = q * n / (Math.pow(slope, 0.5))\n\n                let difference = qns - arPower\n                // differenceArray.push(difference)\n\n                // depthArray.push(depth)\n                // qnsArray.push(qns)\n                // console.log(qns)\n                numberOfLoops = numberOfLoops - 1\n                depth = depth + 0.0005\n                if (difference <= 0) {\n                    this.setState({ difference })\n                    this.setState({ optimumDepth: depth })\n                    console.log(difference, depth)\n                    return (difference, depth)\n                    break\n                }\n            }\n            // console.log(differenceArray)\n        }\n    }\n\n    render() {\n        const options = [\n            { value: \"Trapezoidal\", label: \"Trapezoidal\" },\n            { value: \"Rectangular\", label: \"Rectangular\" },\n            { value: \"Circular\", label: \"Circular\" }\n        ]\n\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row my-5\">\n                    <div className=\"col-6 mx-auto card\">\n                        <h5 className=\"display-5\">Enter Rainfall Data</h5>\n                        <div className=\"row mt-2\">\n                            <div className=\"col-6\">\n                                <label>Year</label>\n                                <input className=\"form-control\" type=\"number\" value={this.state.yearBlank} onChange={this.onYearSubmit} />\n                            </div>\n                            <div className=\"col-6\">\n                                <label>Rainfall - m<sup>3</sup>/s</label>\n                                <input className=\"form-control\" type=\"number\" value={this.state.rainfallBlank} onChange={this.onMeasureSubmit} />\n                            </div>\n                            <div className=\"col-8 mx-auto\">\n                                <button className=\"btn btn-success form-control my-3\" onClick={this.onRainSubmit}>Submit</button>\n                            </div>\n                        </div>\n                        <div className=\"row col-6 mx-auto\">\n                            {/* <div className=\"col\"> */}\n                            <button className=\"btn btn-success form-control my-3\" onClick={this.calcuateQ}>Calculate</button>\n                            {/* </div> */}\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row my-5\">\n                    <div className=\"col-7 mx-auto card\">\n                        <h5>Sections</h5>\n                        <div className=\"row mt-2\">\n                            <div className=\"col-4 my-3\">\n                                <label>Enter Return Period</label>\n                                <input className=\"form-control\" type=\"text\" />\n                            </div>\n                            <div className=\"col-4 my-3\">\n                                <label>Select a section</label>\n                                <Select options={options} onChange={this.sectionSelect.bind(this)} />\n                            </div>\n                        </div>\n                        <div className=\"row my-4\">\n                            <div className=\"col-4\">\n                                <label>Select the Manning Value</label>\n                                <Select options={this.state.manningOptions} onChange={(e) => this.setState({ manningValue: e.value })} />\n                            </div>\n                            <div className=\"col-4\">\n                                <p>Manning Value: {this.state.manningValue}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-4 my-3 card mx-1\">\n                        <h5>Parameters</h5>\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <label>Height One</label>\n                                <input type=\"number\" className=\"form-control mb-2\" onChange={(e) => this.setState({ h1: e.target.value })} />\n                                <label>Height Two</label>\n                                <input type=\"number\" className=\"form-control\" onChange={(e) => this.setState({ h2: e.target.value })} />\n                                <label>Distance</label>\n                                <input type=\"number\" className=\"form-control\" onChange={(e) => this.setState({ distance: e.target.value })} />\n                                <button className=\"btn btn-success my-2\" onClick={this.calculateSlope}>Calculate Slope</button>\n                            </div>\n                            <div className=\"col-6\">\n                                <label>Enter Slope</label>\n                                <input type=\"number\" className=\"form-control\" onChange={(e) => this.setState({ slope: (Number(e.target.value) / 100) })} />\n                            </div>\n                        </div>\n                        <div className=\"row mx-auto\">\n                            <p>Slope as a percentage: {this.state.slope}</p>\n                        </div>\n                        <hr style={{ color: \"red\" }} />\n                        <div className=\"row\">\n                            <div className=\"col-6\">\n                                <label>Enter Breadth</label>\n                                <input type=\"number\" className=\"form-control\" onChange={(e) => this.setState({ breadth: (Number(e.target.value)) })} />\n                                <label>Enter Depth</label>\n                                <input type=\"number\" className=\"form-control\" onChange={(e) => this.setState({ depth: (Number(e.target.value)) })} />\n                                <div hidden={this.state.zInputHidden}>\n                                    <label>Enter Z</label>\n                                    <input type=\"number\" className=\"form-control\" onClick={(e) => this.setState({ zValue: e.target.value })} />\n                                </div>\n                                <div className=\"row justify-content-center my-3\">\n                                    <div className=\"col-6\">\n                                        <button className=\"btn btn-success\" onClick={this.calculateMain}>\n                                            Calculate\n                                        </button>\n                                    </div>\n                                </div>\n\n                                <div className=\"card row mx-auto my-3\">\n                                    <p>Optimum depth: {this.state.optimumDepth}</p>\n                                    <p>Difference: {this.state.difference}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home\n","import logo from './logo.svg';\nimport './App.css';\nimport Home from \"./components/home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>,\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}